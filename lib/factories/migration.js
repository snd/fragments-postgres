// Generated by CoffeeScript 1.10.0
module.exports.fragments_pgMigrate = function(fragments_Promise, fragments_lodash, fragments_console, fragments_config_migrationPath, fragments_config_databaseUrl, fragments_insertSchemaInfoTableIfNotExists, fragments_selectMigrations, fragments_applyMigration, fragments_readMigrationDir) {
  return function(isVerbose, isDry) {
    var _;
    if (isVerbose == null) {
      isVerbose = false;
    }
    if (isDry == null) {
      isDry = false;
    }
    _ = fragments_lodash;
    return fragments_readMigrationDir().then(function(migrations) {
      if (isVerbose) {
        fragments_console.log("fragments_config_migrationPath =", fragments_config_migrationPath);
        fragments_console.log("fragments_config_databaseUrl =", fragments_config_databaseUrl);
        fragments_console.log("migrations =", migrations);
      }
      return fragments_insertSchemaInfoTableIfNotExists().then(function() {
        return fragments_selectMigrations();
      }).then(function(appliedMigrations) {
        var notAppliedMigrations, reducer;
        notAppliedMigrations = _.difference(migrations, appliedMigrations);
        if (isVerbose) {
          fragments_console.log("already applied =", appliedMigrations);
        }
        fragments_console.log("about to apply =", notAppliedMigrations);
        if (isDry) {
          return;
        }
        reducer = function(soFar, m) {
          return soFar.then(function() {
            fragments_console.log("applying", m);
            return fragments_applyMigration(m);
          });
        };
        return notAppliedMigrations.reduce(reducer, fragments_Promise.resolve());
      });
    });
  };
};

module.exports.fragments_getFileExtension = function(fragments_path) {
  return function(filename) {
    var ext;
    ext = fragments_path.extname(filename || '').split('.');
    return ext[ext.length - 1];
  };
};

module.exports.fragments_insertSchemaInfoTableIfNotExists = function(fragments_mesa) {
  return function() {
    return fragments_mesa.query("CREATE TABLE IF NOT EXISTS schema_info (migration text NOT NULL)");
  };
};

module.exports.fragments_selectMigrations = function(fragments_lodash, fragments_mesa) {
  return function() {
    return fragments_mesa.table('schema_info').find().then(function(schemaInfo) {
      return fragments_lodash.map(schemaInfo, 'migration');
    });
  };
};

module.exports.fragments_applyMigration = function(mesa, fragments_readMigrationFile) {
  return function(migrationFileName) {
    return fragments_readMigrationFile(migrationFileName).then(function(migrationSql) {
      return mesa.wrapInTransaction(function(connection) {
        var transaction;
        transaction = mesa.setConnection(connection);
        return transaction.query(migrationSql).then(function() {
          return transaction.table('schema_info').unsafe().insert({
            migration: migrationFileName
          });
        });
      });
    });
  };
};

module.exports.fragments_readMigrationDir = function(fragments_fs, fragments_config_migrationPath, fragments_getFileExtension) {
  return function() {
    return fragments_fs.readdirAsync(fragments_config_migrationPath).then(function(files) {
      return files.filter(function(file) {
        return 'sql' === fragments_getFileExtension(file);
      });
    });
  };
};

module.exports.fragments_readMigrationFile = function(fragments_fs, fragments_path, fragments_config_migrationPath) {
  return function(name) {
    var path;
    path = fragments_path.join(fragments_config_migrationPath, name);
    return fragments_fs.readFileAsync(path, 'utf-8');
  };
};

module.exports.fragments_pgCreate = function(fragments_childProcess, fragments_config_postgresDatabase, fragments_console) {
  return function() {
    fragments_console.log('createDatabase', fragments_config_postgresDatabase);
    return fragments_childProcess.execAsync("createdb " + fragments_config_postgresDatabase);
  };
};

module.exports.fragments_pgDrop = function(fragments_childProcess, fragments_config_postgresDatabase, fragments_console) {
  return function() {
    fragments_console.log('dropDatabase', fragments_config_postgresDatabase);
    return fragments_childProcess.execAsync("dropdb --if-exists " + fragments_config_postgresDatabase);
  };
};

module.exports.fragments_pgDropCreate = function(fragments_pgDrop, fragments_pgCreate) {
  return function() {
    return fragments_pgDrop().then(function() {
      return fragments_pgCreate();
    });
  };
};

module.exports.fragments_pgDropCreateMigrate = function(fragments_pgDropCreate, fragments_pgMigrate) {
  return function() {
    return fragments_pgDropCreate().then(function() {
      return fragments_pgMigrate();
    });
  };
};
